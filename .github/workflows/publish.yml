name: Publish to NPM

# 当推送标签时触发此工作流
# This workflow is triggered when a tag is pushed
on:
  push:
    tags:
      - 'v*' # 匹配所有以 v 开头的标签，如 v1.0.0, v2.1.3-beta 等
             # Matches all tags starting with 'v', such as v1.0.0, v2.1.3-beta, etc.

jobs:
  publish:
    name: Publish Package to NPM
    runs-on: ubuntu-latest
    
    # 设置发布权限
    # Set up publish permissions
    permissions:
      contents: read
      id-token: write # 需要此权限以使用 NPM provenance
                      # Required for NPM provenance
    
    steps:
      # 步骤 1: 检出代码
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 步骤 2: 设置 Node.js 环境
      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      # 步骤 3: 安装依赖
      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci
      
      # 步骤 4: 运行类型检查
      # Step 4: Run type checking
      - name: Type check
        run: npm run type-check
      
      # 步骤 5: 运行测试
      # Step 5: Run tests
      - name: Run tests
        run: npm test
      
      # 步骤 6: 构建项目
      # Step 6: Build the project
      - name: Build
        run: npm run build
      
      # 步骤 7: 验证标签版本与 package.json 版本一致
      # Step 7: Verify tag version matches package.json version
      - name: Verify version match
        run: |
          # 从 git 标签中提取版本号（去掉 'v' 前缀）
          # Extract version from git tag (remove 'v' prefix)
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          
          # 从 package.json 中提取版本号
          # Extract version from package.json
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          echo "Git tag version: v$TAG_VERSION"
          echo "package.json version: $PACKAGE_VERSION"
          
          # 检查版本是否匹配
          # Check if versions match
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "❌ Error: Version mismatch!"
            echo "Git tag: v$TAG_VERSION"
            echo "package.json: $PACKAGE_VERSION"
            exit 1
          fi
          
          echo "✅ Versions match: $PACKAGE_VERSION"
      
      # 步骤 8: 发布到 NPM
      # Step 8: Publish to NPM
      - name: Publish to NPM
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          # 注意：你需要在 GitHub 仓库的 Settings -> Secrets and variables -> Actions 
          # 中添加名为 NPM_TOKEN 的密钥，值为你的 NPM access token
          # Note: You need to add a secret named NPM_TOKEN in your GitHub repository
          # Settings -> Secrets and variables -> Actions
          # The value should be your NPM access token
      
      # 步骤 9: 创建 GitHub Release
      # Step 9: Create GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## 发布说明 / Release Notes
            
            发布版本 ${{ github.ref_name }}
            Release version ${{ github.ref_name }}
            
            ### 安装 / Installation
            ```bash
            npm install smkit@${{ github.ref_name }}
            ```
            
            ### 变更日志 / Changelog
            请查看 [CHANGELOG.md](https://github.com/linyuliu/smkit/blob/main/CHANGELOG.md)
            See [CHANGELOG.md](https://github.com/linyuliu/smkit/blob/main/CHANGELOG.md)
            
            ### 构建产物 / Build Artifacts
            - ES Module: `dist/smkit.js`
            - CommonJS: `dist/smkit.cjs`
            - UMD: `dist/smkit.umd.js`
            - TypeScript 定义 / TypeScript Definitions: `dist/index.d.ts`
          draft: false
          prerelease: false
